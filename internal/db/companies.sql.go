// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCompanies = `-- name: CountCompanies :one
SELECT COUNT(*) FROM companies
`

func (q *Queries) CountCompanies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCompanies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name, subscription_plan)
VALUES ($1, $2)
RETURNING id, name, subscription_plan, created_at, updated_at
`

type CreateCompanyParams struct {
	Name             pgtype.Text `json:"name"`
	SubscriptionPlan pgtype.Text `json:"subscription_plan"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.Name, arg.SubscriptionPlan)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubscriptionPlan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, subscription_plan, created_at, updated_at
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubscriptionPlan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, subscription_plan, created_at, updated_at
FROM companies
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubscriptionPlan,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET
    name = COALESCE($2, name),
    subscription_plan = COALESCE($3, subscription_plan),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, subscription_plan, created_at, updated_at
`

type UpdateCompanyParams struct {
	ID               pgtype.UUID `json:"id"`
	Name             pgtype.Text `json:"name"`
	SubscriptionPlan pgtype.Text `json:"subscription_plan"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany, arg.ID, arg.Name, arg.SubscriptionPlan)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubscriptionPlan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
